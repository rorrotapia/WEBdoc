security:
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]

    encoders:
        Symfony\Component\Security\Core\User\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        in_memory:
            memory:
                users:
                    admin:
                        password: $2y$13$4k3fq4Urp4xvhOyKZhDke.KjYKdLeprORulL28Ld2urGylJUJQ43e
                        roles: 'ROLE_ADMIN'
            # entity:
                # class: App\Entity\User
                # property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            provider: in_memory
            form_login:
                login_path: app_login
                check_path: app_login
                default_target_path: easyadmin
            logout: true
            anonymous: ~
            # anonymous: lazy
            # provider: app_user_provider
            # guard:
                # authenticators:
                    # - App\Security\LoginFormAuthenticator
            # logout:
                # path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/, role: ROLE_ADMIN }
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, role: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/profile, roles: ROLE_USER }
